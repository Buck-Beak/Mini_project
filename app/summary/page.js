"use client"
import { useState,useEffect } from "react";
import Image from "next/image";
import axios from "axios";
import * as pdfjs from "pdfjs-dist";
import "pdfjs-dist/build/pdf.worker.entry";

 export default function Summary(){

    const [selectedFile, setSelectedFile] = useState(null);
    const [text,setText] = useState("");
    const [summary, setSummary] = useState("");
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    const API_URL = process.env.NEXT_PUBLIC_API_URL;
    const HEADERS = { "Authorization": `Bearer ${process.env.NEXT_PUBLIC_API_KEY}` };

    useEffect(() => {
        pdfjs.GlobalWorkerOptions.workerSrc = "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.worker.min.js";
    }, []);

    const handleFileChange = async(event) => {
        const file = event.target.files[0];
        if (file) {
            setSelectedFile(file);
            setSummary("");
            extractTextFromPDF(file);
        }
    };

    const extractTextFromPDF = async (file) => {
        const reader = new FileReader();
        reader.readAsArrayBuffer(file);
        reader.onload = async () => {
            const pdf = await pdfjs.getDocument({ data: reader.result }).promise;
            let extractedText = "";

            for (let i = 1; i <= pdf.numPages; i++) {
                const page = await pdf.getPage(i);
                const textContent = await page.getTextContent();
                extractedText += textContent.items.map((item) => item.str).join(" ") + " ";
            }

            console.log("Extracted Text:", extractedText);
            const cleanText = extractedText.replace(/\s+/g, ' ').trim();
            console.log("Extracted Cleaned Text:", cleanText);
            setText(cleanText);
        };
    };

    const chunkText = (text, chunkSize = 1500) => {
        let chunks = [];
        let words = text.split(" ");
        let chunk = [];

        words.forEach((word) => {
            if (chunk.join(" ").length + word.length <= chunkSize) {
                chunk.push(word);
            } else {
                chunks.push(chunk.join(" "));
                chunk = [word];
            }
        });

        if (chunk.length > 0) chunks.push(chunk.join(" "));

        return chunks;
    };

    const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

    const countTokens = (text) => {
        return text.split(/\s+/).length;
    };

    const truncateText = (text, maxTokens) => {
        const tokens = text.split(/\s+/);
        return tokens.length > maxTokens ? tokens.slice(0, maxTokens).join(" ") : text;
    };

    const checkAPIHealth = async () => {
        try {
            const response = await axios.get(API_URL, { headers: HEADERS });
            return response.status === 200;
        } catch {
            return false;
        }
    };

    /*const summarizeText = async () => {
        if (!text.trim()) {
            alert("Please enter some text to summarize.");
            return;
          }
        
          setLoading(true);
          try {
            const response = await axios.post(
             API_URL,
              {
                inputs: text,
                parameters: {
                  max_length: 256,
                  min_length: 30,
                  do_sample: false,
                  truncation: true
                }
              },
              { headers: HEADERS }
            );
        
            console.log("API Response Data:", response.data);
            console.log("First Item in Data:", response.data[0]);  
            console.log("Summary Text:", response.data[0]?.summary_text);  
      
            if (response.data && response.data.length > 0 && response.data[0].generated_text) {
              setSummary(response.data[0].generated_text); 
            } else {
              setSummary("No summary generated by API.");
            }      
          } catch (error) {
            console.error("API Error:", error);
            setSummary("Error contacting API.");
          }
          setLoading(false);
    };*/

    /*const summarizeText = async () => {
        if (!text.trim()) {
            alert("Please enter some text to summarize.");
            return;
        }

        const maxTokens = 1024;
        const truncatedText = truncateText(text, maxTokens);
        const cleanText = truncatedText.replace(/\s+/g, ' ').trim(); 

        setLoading(true);
        setError(null);

        try {
            // Check if API is up before making a request
            const isAPIUp = await checkAPIHealth();
            if (!isAPIUp) {
                throw new Error("API is currently down or unavailable.");
            }

            const response = await axios.post(
                API_URL,
                {
                    inputs: [cleanText],  
                    parameters: {
                        max_length: 256,
                        min_length: 30,
                        do_sample: false,
                        truncation: true
                    }
                },
                { headers: HEADERS }
            );

            console.log("API Response Data:", response.data);

            if (response.data && response.data.length > 0 && response.data[0].generated_text) {
                setSummary(response.data[0].generated_text);
            } else {
                setSummary("No summary generated.");
            }
        } catch (error) {
            console.error("API Error:", error.response ? error.response.data : error.message);
            setError(error.response?.data?.error || "Error contacting API.");
        }

        setLoading(false);
    };*/

    const summarizeText = async () => {
        if (!text.trim()) {
            setError("Please extract text from a PDF first.");
            return;
        }

        setLoading(true);
        setError(null);
        setSummary("");

        const textChunks = chunkText(text, 1500);
        let summaries = [];

        try {
            for (const chunk of textChunks) {
                await delay(1000); // Prevent API rate limiting

                try {
                    const response = await axios.post(
                        API_URL,
                        { inputs: chunk },
                        { headers: HEADERS }
                    );

                    console.log("API Response:", response.data);

                    if (response.data && Array.isArray(response.data) && response.data.length > 0 && response.data[0].generated_text) {
                        summaries.push(response.data[0].generated_text);
                    } else {
                        console.warn("Unexpected API response:", response.data);
                    }
                } catch (chunkError) {
                    console.error("Chunk API Error:", chunkError.response?.data || chunkError.message);
                    setError("Some chunks failed to summarize. Showing partial summary.");
                    break;
                }
            }

            if (summaries.length > 0) {
                setSummary(summaries.join(" "));
            } else {
                setError("No summary generated. API might not be returning expected data.");
            }
        } catch (error) {
            console.error("API Error:", error.response?.data || error.message);
            setError("Error contacting API.");
        }

        setLoading(false);
    };

    return(
        <div className="h-screen w-screen bg-blue-950 flex">
            <main className="flex-1 flex justify-center items-center p-8">
            <div className="w-[105%] h-[107%] bg-white rounded-2xl shadow-lg p-8 flex flex-grow flex-col items-center justify-center">
            <div className="bg-white rounded-2xl shadow-lg w-[90%] h-[90%] p-6 flex flex-col gap-y-6">
                <h2 className="text-xl font-semibold mb-4 text-center">Share your work</h2>
                <p className="text-gray-500 text-sm mb-4 text-center">What have you been working on?</p>
                
                <div className="border-dashed border-2 border-gray-300 rounded-lg p-6 flex flex-col items-center justify-center text-gray-500">
                    <label className="cursor-pointer">
                    <input 
                        type="file" 
                        className="hidden" 
                        accept="application/pdf"
                        onChange={handleFileChange} 
                    />
                    <div className="flex flex-col items-center">
                        <p ><Image src="/images/cloud-computing.png" alt="Signup" width={40} height={40} /></p>
                    </div>

                    {/*<textarea 
                        type="text"
                        value={text}
                        onChange={(e) => setText(e.target.value)}
                    />*/}
                    </label>
                    {/* Display selected file */}
                    {selectedFile && (
                        <div className="mt-3 text-sm text-center text-gray-700">
                            <p className="font-medium">{selectedFile.name}</p>
                            <p className="text-xs text-gray-500">({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)</p>
                        </div>
                    )}
                </div>

                <div className="mt-4">
                    <label className="text-sm text-gray-600">Summary</label>
                    <textarea 
                        value={loading?"Loading..":summary} 
                        placeholder="Summary will appear here..."
                        className="w-full p-2 border border-gray-300 rounded-md mt-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        readOnly
                    />
                    
                </div>

                <div className="mt-4 flex justify-between">
                    <button className="px-4 py-2 text-gray-600 bg-gray-200 rounded-md">Save as draft</button>
                    <button className="px-4 py-2 bg-blue-500 text-white rounded-md" onClick={summarizeText}>Upload</button>
                </div>
            </div>
            </div>
            </main>
        </div>
    )
}